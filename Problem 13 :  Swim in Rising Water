class Solution {
public:
  int swimInWater(vector<vector<int>>& grid) {
    const int dx[] = {-1, 1, 0, 0};
    const int dy[] = {0, 0, -1, 1};
    const int n = (int) grid.size();
    auto Ask = [&](int mid) -> bool {
      vector<bool> dist(n * n, false);
      dist[0] = true;
      queue<int> q;
      q.push(0);
      while (!q.empty()) {
        int u = q.front();
        q.pop();
        int x = u / n;
        int y = u % n;
        for (int i = 0; i < 4; i++) {
          int nx = x + dx[i];
          int ny = y + dy[i];
          if (0 <= nx && nx < n && 0 <= ny && ny < n) {
            int nu = nx * n + ny;
            if (!dist[nu] && grid[nx][ny] <= mid && grid[x][y] <= mid) {
              dist[nu] = true;
              q.push(nu);
            }
          }
        }
      }
      return dist[n * n - 1];
    };
    int low = 0;
    int high = n * n - 1;
    while (low != high) {
      int mid = (low + high) >> 1;
      if (Ask(mid)) {
        high = mid;
      } else {
        low = mid + 1;
      }
    }
    return low;
  }
};
