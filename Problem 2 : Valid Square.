class Solution {
public:
    int distCal(vector<int> &p1, vector<int> &p2) {
        return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
    }

    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        unordered_set<int> s({distCal(p1, p2), distCal(p1, p3), distCal(p1, p4), distCal(p2, p3), distCal(p2, p4), distCal(p3, p4)});
        // check for presence of 0 first and see the occurence.
        return !s.count(0) && s.size() == 2;
    }
};
