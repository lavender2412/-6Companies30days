class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int answer = 0, n = nums.size();
        vector<int> temp = nums;
        sort(temp.begin(),temp.end()); O(NlogN) +O(N) + O(N)
        int low,high;
        for( low=0;low<n;)
        {
            if(temp[low]==nums[low])
                low++;
            else break;
        }
        for( high=n-1;high>=0;)
        {
            if(temp[high]==nums[high])
                high--;
            else break;
        }
        cout << low <<" "<< high;
        if(low < high) return high-low+1;
        return 0;
        
    }
};
//
O(N) solution
//look into this later
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int end = -1;
        int max = nums[0];
        for(int i = 1; i < nums.length; i++){
            if(max > nums[i]){ // the left value is greater then current value
                end = i; // mark that index with end
            }
            else{
                max = nums[i];
            }
        }
        
        int start = 0;
        int min = nums[nums.length - 1];
        for(int i = nums.length - 2; i >= 0; i--){
            if(min < nums[i]){ // the right value is smaller then current value
                start = i; // mark that index with start
            }
            else{
                min = nums[i];
            }
        }
        return end - start + 1;
    }
}
