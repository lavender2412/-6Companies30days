class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
       /* O(N3) solution
     int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            for(int j = i+1 ; j < n; j++)
            {
                for(int k = j+1; k < n; k++)
                {
                    if(nums[i] < nums[j] && nums[j] < nums[k])
                        return true;
                }
            }

        }
        return false;
        
        unordered_map<int,int> map;
        for(int i =0 ;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(map.find(nums[j]) != map.end())
                {
                    
                }

            }
        }
        map is not required
        //solution one - O(N), 2*O(N).
        vector<int> left(n,0),right(n,0);
        left[0] = nums[0],right[n-1]=nums[n-1];
        for(int i=1;i<n;i++)
            left[i] = min(left[i-1],nums[i]);
        for(int i=n-2;i>=0;i--)
            right[i]=max(right[i+1],nums[i]);
        for(int i=0;i<n;i++)
        {
            if(left[i] < nums[i] && nums[i] < right[i])
                return true;
        }
        return false;
        
        
        lets chose only O(1) space 
        */
        int low = INT_MAX, high = INT_MAX;
        for(int i=0;i<n;i++)
        {
            if(nums[i] <= low) low = nums[i];
            else if(nums[i] <= high) high = nums[i];
          else return true;
        }
        return false;
    }
};
